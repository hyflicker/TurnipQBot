"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const __1 = require("..");
describe('Queue', () => {
    describe('shift', () => {
        it('should behave ok with a small amount of data', () => {
            const queue = new __1.default();
            queue.push(1);
            queue.push(2, 3);
            chai_1.expect(queue.shift()).to.equal(1);
            chai_1.expect(queue.length).to.equal(2);
            chai_1.expect(queue.shift()).to.equal(2);
            chai_1.expect(queue.shift()).to.equal(3);
            chai_1.expect(queue.shift()).to.equal(undefined);
            queue.push(4);
            chai_1.expect(queue.shift()).to.equal(4);
        });
        it("should behave ok when matching granularity", () => {
            const queue = new __1.default();
            for (let i = 0; i < 1000; i++) {
                queue.push(i);
            }
            for (let i = 0; i < 1000; i++) {
                queue.shift();
            }
            queue.push(2);
            chai_1.expect(queue.shift()).to.equal(2);
        });
    });
    describe('length', () => {
        it('should stay consistent', () => {
            const queue = new __1.default();
            chai_1.expect(queue.length).to.equal(0);
            queue.push(1);
            queue.push(2, 3);
            chai_1.expect(queue.length).to.equal(3);
            for (let i = 0; i < 3; i++) {
                queue.shift();
            }
            chai_1.expect(queue.length).to.equal(0);
            queue.shift();
            chai_1.expect(queue.length).to.equal(0);
            for (let i = 0; i < 503; i++) {
                queue.shift();
            }
            chai_1.expect(queue.length).to.equal(0);
        });
    });
    it('should behave ok with a real example', () => {
        const queue = new __1.default();
        queue.push(1);
        queue.push(2);
        for (let i = 10; i < 10000; i++) {
            queue.push(i);
        }
        queue.push('Hello', 'World');
        chai_1.expect(queue.peek()).to.equal(1);
        chai_1.expect(queue.last()).to.equal('World');
        chai_1.expect(queue.length).to.equal(9994);
        chai_1.expect(queue.shift()).to.equal(1);
        chai_1.expect(queue.peek()).to.equal(2);
        chai_1.expect(queue.length).to.equal(9993);
        queue.clear(); // Empties queue
        chai_1.expect(queue.length).to.equal(0);
        chai_1.expect(queue.shift()).to.equal(undefined);
        chai_1.expect(queue.length).to.equal(0);
    });
});
//# sourceMappingURL=queue.spec.js.map